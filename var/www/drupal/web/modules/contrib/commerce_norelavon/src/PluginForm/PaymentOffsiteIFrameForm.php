<?php

/**
 * Defines the Payment Offsite iFrame Form for Elavon Integration.
 *
 * This class extends the base payment offsite form and is responsible for building the
 * configuration form used to handle offsite payments via Elavon. The form initiates the process
 * of obtaining a token from Elavon, then utilizes the token to invoke the Elavon Converge API
 * JavaScript for loading in an iframe. Additional configurations and actions related to the
 * offsite payment process are managed within this form.
 */

namespace Drupal\commerce_norelavon\PluginForm;

use Drupal\commerce_payment\PluginForm\PaymentOffsiteForm as BasePaymentOffsiteForm;
use Drupal\Core\Form\FormStateInterface;
use Drupal\Core\Render\Element;
use Drupal\Core\Url;

// Including the file containing Main Build Rate function.
module_load_include('inc', 'commerce_norelavon', 'lib/commerce_elavon_token_call_main');

class PaymentOffsiteIFrameForm extends BasePaymentOffsiteForm
{
  /**
   * {@inheritdoc}
   */
  public function buildConfigurationForm(array $form, FormStateInterface $form_state)
  {
    $form = parent::buildConfigurationForm($form, $form_state);

    /** @var \Drupal\commerce_payment\Entity\PaymentInterface $payment */
    $payment = $this->entity;

    //Get the TOKEN from Elavon API
    $token = commerce_elavon_token_call_main($payment);

    if (!isset($token)) {
      \Drupal::messenger()->addError(t('No response from our payment server. Please call in for support.'));
      $form_state->setRebuild(); // Prevent form submission.
    } elseif (strlen($token) != 32) {
      \Drupal::messenger()->addError(t('No response from our payment server. Please call in for support.'));
      $form_state->setRebuild(); // Prevent form submission.
    }

    $payment_gateway_plugin = $payment->getPaymentGateway()->getPlugin();
    $configuration = $payment_gateway_plugin->getConfiguration();

    //Attaching Converge API JS Library
    if ($configuration['mode'] === 'test') {
      $form['#attached']['library'][] = 'commerce_norelavon/elavon_test';
    } else {
      $form['#attached']['library'][] = 'commerce_norelavon/elavon_live';
    }

    //Attaching JS Library to load Elavon in IFrame
    $form['#attached']['library'][] = 'commerce_norelavon/OffsiteIFramePayment';

    $return_url = $form['#return_url'];
    //Replace "payment" with "review" in the #return_url generated by Drupal
    $review_return_url = str_replace('/payment/', '/review/', $return_url);

    $options = [
      "token" => $token,
      "redirect_url" => $review_return_url,
    ];

    $form = $this->buildRedirectForm($form, $form_state, '', $options, '');
    //Pushing Options to DrupalSettings to get them in JS
    $form['#attached']['drupalSettings']['elavon']['transactionData'] = $options;

    return $form;
  }

  /**
   * {@inheritdoc}
   */
  public function buildRedirectForm(array $form, FormStateInterface $form_state, $redirect_url, array $data, $redirect_method = BasePaymentOffsiteForm::REDIRECT_GET)
  {
    $helpMessage = t('Please click on the button below to make the payment and complete the purchase.') . "\n" . t('If payment processing encounters an error, you\'ll return to the Order Information page. Please review and retry.');

    $form['commerce_message'] = [
      '#markup' => '<div class="checkout-help">' . $helpMessage . '</div>',
      '#weight' => -10,
      '#process' => [
        [get_class($this), 'processRedirectForm'],
      ],
    ];

    return $form;
  }

  /**
   * {@inheritdoc}
   */
  public static function processRedirectForm(array $element, FormStateInterface $form_state, array &$complete_form)
  {
    $complete_form['#attributes']['class'][] = 'payment-redirect-form';
    unset($element['#action']);
    // The form actions are hidden by default, but we need it.
    $complete_form['actions']['#access'] = TRUE;

    foreach (Element::children($complete_form['actions']) as $element_name) {
      $complete_form['actions'][$element_name]['#access'] = TRUE;

      // Check if the element name is "next". This has Complete and Back buttons.
      if ($element_name === 'next') {
        //Back Button Logic
        $updated_href = "";
        // Get the current path.
        $current_path = \Drupal::service('path.current')->getPath();

        // Check if the current path ends with "/review".
        if (substr($current_path, -7) === '/review') {
          // If the current path ends with "/review", change it to end with "/order_information"
          $order_information_path = rtrim($current_path, 'review') . 'order_information';
          // Build the URL for the Order Information Page
          $url = Url::fromUri('internal:' . $order_information_path);
        } else {
          $updated_href = $current_path;
          // Create the updated URL
          $url = Url::fromUri('internal:' . $updated_href);
          //$url = Url::fromUri($updated_href);

        }
        // Generate the link as a string
        $updated_link = \Drupal\Core\Link::fromTextAndUrl(t('Go back'), $url)->toString();

        // Set the updated link as the #suffix property
        $complete_form['actions'][$element_name]['#suffix'] = $updated_link;
      }
    }

    return $element;
  }

}





